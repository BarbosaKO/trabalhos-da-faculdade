#include <direct.h> // BIBLIOTECA DA MICROSOFT
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <windows.h>
#include <VersionHelpers.h>	//NÃO CONSIGO RODAR PQ NÃO TENHO WINDOWS 1O -MARCEL
#include <time.h>

//LUIS - Renomear, mover, data, hora e sair.

void _CriaDirArc(char *p1,char *p2)
{
    char *dir = (char*)calloc(1,sizeof(char));
    FILE *arq;
//    int lenDir;

    if(strcmp(p1,"-d") == 0){
        strcat(dir, p2);
        //printf("%s", dir);		//Checagem de diretório -Marcel
        if( _mkdir(dir) == 0 )
            printf( "Diretorio %s criado com sucesso\n", p2);
        else
            printf("Diretorio já existe\n");
    }
    else if(strcmp(p1,"-a") == 0){
        strcat(dir,p2);
        strcat(dir,".txt");

        arq = fopen(dir,"a+");
        //printf("%s\n%s\n", p2,dir);

        if(arq != NULL)
            printf("Arquivo %s criado!\n", p2);
        else
            printf("Erro ao criar o arquivo %s\n", p2);

        fclose(arq);
    }
    else{
        printf("Parametro Invalido!\n");
    }
    free(dir);
}

void _Limpar(){
    system("CLS");
    printf("============= GLM OS - 1.6 =============\n");		//Toda vez que der CLS usa essa função pra voltar com o nome do programa no topo -Marcel
}

void _InsereTexto(){}

void _ListarDir(){}

void _Apagar(char* p1)	//DIRETÓRIO
{
	if(_rmdir(p1)==0)
	{
		printf("Diretório excluido com sucesso!\n");
	}
	else
	{
		printf("Erro ao apagar diretório: ");
		if(errno == ENOTEMPTY)
		{
			printf("Diretório não está vazio ou não é um diretório!\n");
		}
		else if(errno == ENOENT)
		{
			printf("Diretório não encontrado!\n");
		}
		else{	printf("Erro desconhecido!\n");		}
	}
}

void _Renomear(){}

void _Mover(){}

void _Deletar(char* p1)		//Arquivo
{
	strcat(p1, ".txt");
	if(remove(p1)==0)
	{
		printf("Arquivo %s deletado com sucesso!\n", p1);
	}
	else{printf("Falha ao deletar arquivo!\n");	}
}

void _Ajuda()
{
	_Limpar();
	printf("\n\n\n|==============================================================================|\n");
	printf("|COMANDOS   |DESCRIÇÃO                                                         |\n");
	printf("|==============================================================================|\n");
	printf("|CRIAR		|CRIA UM ARQUIVO OU DIRETÓRIO                                  |\n");
	printf("|INSERIR	|INSERE UM TEXTO EM UM ARQUIVO                                 |\n");
	printf("|LISTAR		|LISTA ARQUIVOS E DIRETÓRIOS DA PASTA                          |\n");
	printf("|APAGAR		|APAGA UM DIRETORIO                                            |\n");
	printf("|RENOMEAR	|RENOMEIA UM ARQUIVO OU DIRETORIO                              |\n");
	printf("|MOVER		|MOVE UM ARQUIVO OU DIRETÓRIO                                  |\n");
	printf("|DELETAR	|DELETA UM DIRETÓRIO                                           |\n");
	printf("|AJUDA		|LISTA TODOS OS COMANDOS DESTA TABELA JUNTAMENTE COM DESCRIÇÕES|\n");
	printf("|VER		|IMPRIME A VERSÃO DO SISTEMA OPERACIONAL                       |\n");
	printf("|DATA		|IMPRIME A DATA DO SISTEMA OPERACIONAL                         |\n");
	printf("|HORA		|IMPRIME A HORA DO SISTEMA OPERACIONAL                         |\n");
	printf("|LIMPAR		|LIMPA O CONTEÚDO ATUAL DA TELA                                |\n");
	printf("|SAIR		|FINALIZA O PROGRAMA                                           |\n");
}

void _Version()
{
    if	(!IsWindows10OrGreater())		printf("Seu sistema é Windows 10\n");			//Vai verificar qual a versão com a biblioteca VersionHelpers -Marcel
	else if(!IsWindows8Point1OrGreater())	printf("Seu sistema é Windows 8.1\n");
	else if(!IsWindows8OrGreater())			printf("Seu sistema é Windows 8\n");
	else if(!IsWindows7SP1OrGreater())		printf("Seu sistema é Windows 7 SP 1\n");
	else if(!IsWindows7OrGreater())			printf("Seu sistema é Windows 7\n");
	else if(!IsWindowsVistaSP2OrGreater())	printf("Seu sistema é Windows Vista SP 2\n");
	else if(!IsWindowsVistaSP1OrGreater())	printf("Seu sistema é Windows Vista SP 1\n");
	else if(!IsWindowsVistaOrGreater())		printf("Seu sistema é Windows Vista\n");
	else if(!IsWindowsXPSP3OrGreater())		printf("Seu sistema é Windows XP SP 3\n");
	else if(!IsWindowsXPSP2OrGreater())		printf("Seu sistema é Windows XP SP 2\n");
	else if(!IsWindowsXPSP1OrGreater())		printf("Seu sistema é Windows XP SP 1\n");
	else if(!IsWindowsXPOrGreater())		printf("Seu sistema é Windows XP\n");

}

void _Data(){
    time_t rawtime;
    struct tm * timeinfo;
    char *output;

    time ( &rawtime );
    timeinfo = localtime ( &rawtime );
    printf("Data: %d/%d/%d\n", timeinfo->tm_mday, timeinfo->tm_mon + 1, timeinfo->tm_year + 1900);
    //sprintf(output, "[%d %d %d %d:%d:%d]",timeinfo->tm_mday, timeinfo->tm_mon + 1, timeinfo->tm_year + 1900, timeinfo->tm_hour, timeinfo->tm_min, timeinfo->tm_sec);
}

void _Hora(){
    time_t rawtime;
    struct tm * timeinfo;
    char *output;

    time ( &rawtime );
    timeinfo = localtime ( &rawtime );
    printf("Hora: %d:%d:%d\n", timeinfo->tm_hour, timeinfo->tm_min, timeinfo->tm_sec);
}


void _Sair(){
    system("CLS");
    printf("Desligando");
    for(int i=0; i<3; i++)
    {
      	Sleep(250);
    	printf(".");
    	Sleep(250);
	}
    system("CLS");
    printf("Desligado");
    exit(0);
}

int main()
{
    char text[255];
    char *comand,*p1,*p2;
    int i,j,k,len,tamC,tamP1,tamP2;;
    setlocale(LC_ALL, "");

    printf("\n  .g8\"\"\"bgd  `7MMF'      `7MMM.     ,MMF\'                .g8\"\"8q.    .M\"\"\"bgd \n.dP\'     `M    MM          MMMb    dPMM                .dP\'    `YM. ,MI    \"Y \ndM\'       `    MM          M YM   ,M MM                dM\'      `MM `MMb.     \nMM             MM          M  Mb  M\' MM                MM        MM   `YMMNq. \nMM.    `7MMF\'  MM      ,   M  YM.P\'  MM      mmmmm     MM.      ,MP .     `MM \n`Mb.     MM    MM     ,M   M  `YM\'   MM                `Mb.    ,dP\' Mb     dM \n  `\"bmmmdPY  .JMMmmmmMMM .JML. `\'  .JMML.                `\"bmmd\"\'   P\"Ybmmd\"\n           ");
    printf("\nCarregando");
    for(int i=0; i<2; i++)
    {
      	Sleep(250);
    	printf(".");
    	Sleep(250);
	}
    system("CLS");

    printf("============= GLM OS - 1.6 =============\n");
    while(1){
        tamC=0;tamP1=0;tamP2=0;len=0;

        printf(">>>");
        fgets(text,255,stdin);
        len = strlen(text);
//========================== SEPARAR PARAMETROS DOS COMANDOS ==========================================
        for(i=0,j=0,k=0; i<len-1; i++,j++){
            if(k==0 && text[i] != ' '){
                tamC++;
            }
            else if(k==1 && text[i] != ' '){
                tamP1++;
            }
            else if(k==2 && text[i] != ' '){
                tamP2++;
            }
            else{
                k++;
                j--;
            }
        }
        comand = (char *) malloc(tamC*sizeof(char));
        p1 = (char *) malloc(tamP1*sizeof(char));
        p2 = (char *) malloc(tamP2*sizeof(char));

        for(i=0;i<tamC;i++)
            comand[i] = text[i];

        comand[tamC] = '\0';

        for(i=tamC+1,j=0; i<(tamC+tamP1+1); i++,j++)
            p1[j] = text[i];

        p1[tamP1] = '\0';

        for(i=tamC+tamP1+2,j=0;i<len;i++,j++)
            p2[j] = text[i];

        p2[tamP2] = '\0';
//=====================================================================================

        if(strcmp(comand,"CRIAR") == 0){
        	_CriaDirArc(p1,p2);                // OK
        }
        else if(strcmp(comand,"INSERIR") == 0){
            //_InsereTexto();
        }
        else if(strcmp(comand,"LISTAR") == 0){
            printf("Listar diretorio!\n");
        }
        else if(strcmp(comand,"APAGAR") == 0){
            _Apagar(p1);                        // OK
        }
        else if(strcmp(comand,"RENOMEAR") == 0){
            printf("Renomear Pasta! FAZENDO\n");
            _Renomear(p1, p2);
        }
        else if(strcmp(comand,"MOVER") == 0){
            printf("Mover Pasta! FAZENDO\n");
            _Mover(p1, p2);
        }
        else if(strcmp(comand,"DELETAR") == 0){
            _Deletar(p1);                       // OK
        }
        else if(strcmp(comand,"AJUDA") == 0){
            _Ajuda();                           // OK
        }
        else if(strcmp(comand,"VER") == 0){
            _Version();                         // OK
        }
        else if(strcmp(comand,"DATA") == 0){
            _Data();                            // OK
        }
        else if(strcmp(comand,"HORA") == 0){
            _Hora();                            // OK
        }
        else if(strcmp(comand,"LIMPAR") == 0){
            _Limpar();                          // OK
        }
        else if(strcmp(comand,"SAIR") == 0){
            _Sair();				            // OK
        }
        else{
            printf("COMANDO INVALIDO!!\n");
        }
    free(comand);
    free(p1);
    free(p2);
    }
    return 0;
}
